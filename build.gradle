task wrapper(type: Wrapper) {
	gradleVersion = '1.10'
}

task update << {
	pull.execute();
	list.execute();
}

task pull(type: Exec) {
	commandLine 'git pull'.split(' ')
	commandLine 'git submodule foreach git pull origin master'.split(' ')
}

task list << {
	def numOfJplQ = [16, 18, 12, 6, 2, 5, 3, 0, 4, 5, 3, 2, 6, 10, 0, 11, 5, 0, 2, 11, 7, 14, 3, 3, 0]
	def numOfGuiQ = [4, 4]
	def md = constructListMd(numOfJplQ, numOfGuiQ);
	new File('list.md').write(md)
	
	println 'list.md is generated.'
}

def constructListMd(numOfJplQ, numOfGuiQ) {
	// Get listdata
	def jplList = getJplList(numOfJplQ)
	def guiList = getGuiList(numOfGuiQ)
	def interpretList = getInterpretList();
	assert jplList.keySet() == guiList.keySet()
	def nameList = jplList.keySet()
	
	def md = ''
	def row = ''
	
	md += "# List\n"

	md += "## JPL\n"

	for(def ch = 0; ch < numOfJplQ.size(); ch++) {
				
		md += "### Chapter ${ch+1}\n"
		
		if(numOfJplQ[ch] < 1) {
			md += "No Exercise\n"
			continue
		}
		
		// Construct table header row
		row = '| |'
		for(def ex = 0; ex < numOfJplQ[ch]; ex++) {
			row += "${ex + 1}|"
		}
		md += row + "\n"
		
		// Construct table header splitter row
		row = '|:---:|'
		for(def ex = 0; ex < numOfJplQ[ch]; ex++) {
			row += ':---:|'
		}
		md += row + "\n"
		
		// Construct table body
		for(def name: nameList) {
			row = "|$name|"
			for(def ex = 0; ex < numOfJplQ[ch]; ex++) {
				row +=  (jplList[name][ch][ex] ? 'o' : ' ') + '|'
			}
			md += row + "\n"
		}
	}
	
	md += "## GUI\n"
	
	// Construct table header row
	row = '| |'
	for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
		for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
			row += "${ch + 1}-${ex + 1}|"
		}
	}
	md += row + "\n"
	
	// Construct table header splitter row
	row = '|:---:|'
	for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
		for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
			row += ':---:|'
		}
	}
	md += row + "\n"
	
	// Construct table body
	for(def name: nameList) {
		row = "|$name|"
		for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
			for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
				row +=  (guiList[name][ch][ex] ? 'o' : ' ') + '|'
			}
		}
		md += row + "\n"
	}
	
	md += "## Interpret\n"
	
	// Construct table header row
	row = '|||'
	md += row + "\n"
	
	// Construct table header splitter row
	row = '|:---:|:---:|'
	md += row + "\n"
	
	// Construct table body
	for(def name: nameList) {
		row = "|$name|" + (interpretList[name] ? 'o' : ' ') + '|'
		md += row + "\n"
	}

	return md
}

def getJplList(numOfJplQ) {

	def data = [:]
	def mainDir = new File('main')
	mainDir.eachDir { nameDir ->
		def name = nameDir.name
		data[name] = new boolean[numOfJplQ.size()][]
		def jplDir = new File(nameDir, 'JPL')
		for(def ch = 0; ch < numOfJplQ.size(); ch++) {
			data[name][ch] = new boolean[numOfJplQ[ch]]
			def chDir = new File(jplDir, String.format('ch%02d', ch + 1))
			for(def ex = 0; ex < numOfJplQ[ch]; ex++) {
				def exDir = new File(chDir, String.format('ex%02d_%02d', ch + 1, ex + 1))
				data[name][ch][ex] = ((exDir.exists() && 1 <= exDir.list().length))
			}
		}
	}
	
	return data
}

def getGuiList(numOfGuiQ) {
	
	def data = [:]
	def mainDir = new File('main')
	mainDir.eachDir { nameDir ->
		def name = nameDir.name
		data[name] = new boolean[numOfGuiQ.size()][]
		def guiDir = new File(nameDir, 'GUI')
		for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
			data[name][ch] = new boolean[numOfGuiQ[ch]]
			for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
				def exDir = new File(guiDir, String.format('%d_%d', ch + 1, ex + 1))
				data[name][ch][ex] = ((exDir.exists() && 1 <= exDir.list().length))
			}
		}
	}
	
	return data
}

def getInterpretList() {
	
	def data = [:]
	def mainDir = new File('main')
	mainDir.eachDir { nameDir ->
		def name = nameDir.name
		def interpretDir = new File(nameDir, 'Interpret')
		data[name] = ((interpretDir.exists() && 1 <= interpretDir.list().length))
	}

	return data
}