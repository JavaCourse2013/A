task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}

task update << {
	pull.execute();
	list.execute();
}

task pull(type: Exec) {
	commandLine 'git pull'.split(' ')
	commandLine 'git submodule foreach git pull origin master'.split(' ')
	commandLine 'git submodule foreach git fetch --all'.split(' ')
	commandLine 'git submodule foreach git reset --hard origin/master'.split(' ')
}

task list << {
	def numOfJplQ = [
		 1 : 1..16,
		 2 : 1..18,
		 3 : 1..12,
		 4 : 1..6,
		 5 : 1..2,
		 6 : 1..5,
		 7 : 1..3,
		 8 : [],
		 9 : 1..4,
		10 : 1..5,
		11 : 1..3,
		12 : 1..2,
		13 : 1..6,
		14 : 1..10,
		15 : [],
		16 : (1..12) - [6, 7, 8, 10],
		17 : 1..5,
		18 : [],
		19 : 1..2,
		20 : 1..11,
		21 : 1..7,
		22 : 1..15,
		23 : 1..3,
		24 : 1..3,
		25 : []
	];
	def numOfGuiQ = [4, 4]
	def md = constructListMd(numOfJplQ, numOfGuiQ);
	new File('list.md').write(md)
	
	println 'list.md is generated.'
}

def constructListMd(numOfJplQ, numOfGuiQ) {
	// Get listdata
	def jplList = getJplList(numOfJplQ)
	def guiList = getGuiList(numOfGuiQ)
	def interpretList = getInterpretList();
	assert jplList.keySet() == guiList.keySet()
	def nameList = jplList.keySet()
	
	def md = ''
	def row = ''
	
	md += "# List\n"

	md += "## JPL\n"

	numOfJplQ.each { ch, exs ->
				
		md += "### Chapter ${ch}\n"
		
		if(exs.size() < 1) {
			md += "No Exercise\n"
		} else {
			// Construct table header row
			row = '| |'
			exs.each { ex ->
				row += "${ex}|"
			}
			md += row + "\n"
			
			// Construct table header splitter row
			row = '|:---:|'
			exs.each {
				row += ':---:|'
			}
			md += row + "\n"
			
			// Construct table body
			nameList.each { name ->
				row = "|$name|"
				exs.each { ex ->
					row += (jplList[name][ch][ex] ? 'o' : ' ') + '|'
				}
				md += row + "\n"
			}
		}
		md += "\n"
	}
	md += "\n"
	
	md += "## GUI\n"
	
	// Construct table header row
	row = '| |'
	for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
		for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
			row += "${ch + 1}-${ex + 1}|"
		}
	}
	md += row + "\n"
	
	// Construct table header splitter row
	row = '|:---:|'
	for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
		for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
			row += ':---:|'
		}
	}
	md += row + "\n"
	
	// Construct table body
	for(def name: nameList) {
		row = "|$name|"
		for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
			for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
				row +=  (guiList[name][ch][ex] ? 'o' : ' ') + '|'
			}
		}
		md += row + "\n"
	}
	md += "\n"
	
	md += "## Interpret\n"
	
	// Construct table header row
	row = '|||'
	md += row + "\n"
	
	// Construct table header splitter row
	row = '|:---:|:---:|'
	md += row + "\n"
	
	// Construct table body
	for(def name: nameList) {
		row = "|$name|" + (interpretList[name] ? 'o' : ' ') + '|'
		md += row + "\n"
	}
	md += "\n"

	return md
}

def getJplList(numOfJplQ) {

	def data = [:]
	def mainDir = new File('main')
	mainDir.eachDir { nameDir ->
		def name = nameDir.name
		data[name] = []
		def jplDir = new File(nameDir, 'JPL')
		def jplDir2 = new File(nameDir, 'src/JPL')
		def jplDir3 = new File(nameDir, 'src/local/JPL')
		numOfJplQ.each { ch, exs ->
			data[name][ch] = []
			def chDir = new File(jplDir, String.format('ch%02d', ch)) // shiro
			def chDir2 = new File(jplDir2, String.format('ch%02d', ch)) // kito
			def chDir3 = new File(jplDir3, String.format('ch%02d', ch)) // kato
			exs.each { ex ->
				def exDir = new File(chDir, String.format('ex%02d_%02d', ch, ex)) // shiro
				def exDir2a = new File(jplDir2, String.format('ex%02d_%02d', ch, ex)) // kito
				def exDir2b = new File(jplDir2, String.format('ch%02d_%02d', ch, ex)) // kito
				def exDir3 = new File(chDir3, String.format('ex%02d_%02d', ch, ex)) // kato
				if (exDir.exists()) {
					data[name][ch][ex] = ((exDir.exists() && 1 <= exDir.list().length))
				} else if (chDir2.exists()) {
					data[name][ch][ex] = ((chDir2.exists() && 1 <= chDir2.list().length))
				} else if (exDir2a.exists()) {
					data[name][ch][ex] = ((exDir2a.exists() && 1 <= exDir2a.list().length))
				} else if (exDir2b.exists()) {
					data[name][ch][ex] = ((exDir2b.exists() && 1 <= exDir2b.list().length))
				} else if (exDir3.exists()) {
					data[name][ch][ex] = ((exDir3.exists() && 1 <= exDir3.list().length))
				}
			}
		}
	}
	
	return data
}

def getGuiList(numOfGuiQ) {
	
	def data = [:]
	def mainDir = new File('main')
	mainDir.eachDir { nameDir ->
		def name = nameDir.name
		data[name] = new boolean[numOfGuiQ.size()][]
		def guiDir = new File(nameDir, 'GUI') // shiro
		def guiDir2 = new File(nameDir, 'src/GUI') // kito
		def guiDir3 = new File(nameDir, 'src/local/GUI') // kato
		for(def ch = 0; ch < numOfGuiQ.size(); ch++) {
			data[name][ch] = new boolean[numOfGuiQ[ch]]
			for(def ex = 0; ex < numOfGuiQ[ch]; ex++) {
				def exDir = new File(guiDir, String.format('%d_%d', ch + 1, ex + 1)) // shiro
				def exDir2 = new File(guiDir2, String.format('ex%d_%d', ch + 1, ex + 1)) // kito
				def exDir3 = new File(guiDir3, String.format('ex%d_%d', ch + 1, ex + 1)) // kato
				if (exDir.exists()) {
					data[name][ch][ex] = ((exDir.exists() && 1 <= exDir.list().length))
				} else if (exDir2.exists()) {
					data[name][ch][ex] = ((exDir2.exists() && 1 <= exDir2.list().length))
				} else if (exDir3.exists()) {
					data[name][ch][ex] = ((exDir3.exists() && 1 <= exDir3.list().length))
				}
				
			}
		}
	}

	return data
}

def getInterpretList() {
	
	def data = [:]
	def mainDir = new File('main')
	mainDir.eachDir { nameDir ->
		def name = nameDir.name
		def interpretDir = new File(nameDir, 'Interpret') // shiro
		def interpretDir2 = new File(nameDir, 'src/Interpret') // kito
		def interpretDir3 = new File(nameDir, 'src/local/Interpret') // kato
		if (interpretDir.exists()) {
			data[name] = ((interpretDir.exists() && 1 <= interpretDir.list().length))		
		} else if (interpretDir2.exists()) {
			data[name] = ((interpretDir2.exists() && 1 <= interpretDir2.list().length))	
		} else if (interpretDir3.exists()) {
			data[name] = ((interpretDir3.exists() && 1 <= interpretDir3.list().length))	
		}
	}

	return data
}